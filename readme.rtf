

To run “cantilever” code with an example trained neural-net protocol, set 

const int q_protocol=2; //flag (0) basic, (1) enhanced, (2) net

and

const int q_read_start_net=1; //flag

and do 

g++ -Wall -o sim cantilever.c -lm -O; ./sim

To train net on a cluster, set 

const int q_protocol=2; //flag (0) basic, (1) enhanced, (2) net

and 

const int q_read_start_net=0; //flag

and do 

g++ -Wall -o sim deschamps taskfarmer_cantilever.c -lm -O

sbatch deschamps.sh

You’ll need to modify deschamps.sh and this portion of “taskfarmer” 

soutput << "#!/usr/bin/env bash" << endl;
snprintf(st,sizeof(st),"#SBATCH --job-name=swarm_%d",n);
soutput << st << endl;
soutput << "#SBATCH --partition=etna-shared" << endl;
soutput << "#SBATCH --account=nano" << endl;
soutput << "#SBATCH --qos=normal" << endl;
snprintf(st,sizeof(st),"#SBATCH --nodes=%d",1);
soutput << st << endl;
soutput << "#SBATCH --time=24:00:00" << endl;
//soutput << "#SBATCH --mem=1000mb" << endl;
soutput << "#SBATCH --ntasks=1" << endl;
snprintf(st,sizeof(st),"./swarm_%d",n);
soutput << st << endl;
soutput.close();

to work with your cluster. Code is currently set to minimize

np=1.0-mean_prob_erasure+0.01*mean_total_energy;
